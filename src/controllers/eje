obtenerBitacorasPorFichaYFecha: async (req, res) => {

        try {
            const { fichaNumero, fecha } = req.query;

            // Buscar el ObjectId de la ficha usando el número de ficha
            const ficha = await Fichas.findOne({ numero: fichaNumero });
            if (!ficha) {
                return res.status(404).json({ message: 'Ficha no encontrada' });
            }

            // Buscar todos los aprendices que tienen esta ficha
            const aprendices = await Aprendices.find({ fichas: ficha._id });
            if (aprendices.length === 0) {
                return res.status(404).json({ message: 'Aprendiz no encontrado' });
            }

            // Extraer el año, mes y día del parámetro fecha
            const year = fecha.substring(0, 4);
            const month = fecha.substring(5, 7);
            const day = fecha.substring(8, 10);

            const startDate = new Date(${year}-${month}-${day}T00:00:00.000Z);
            const endDate = new Date(${year}-${month}-${day}T23:59:59.999Z);

            // Buscar bitácoras para los aprendices que asistieron en la fecha especificada
            const bitacoras = await Bitacora.find({
                createdAt: { $gte: startDate, $lte: endDate },
                aprendiz: { $in: aprendices.map(a => a._id) },
                estado: 'asistió' // Filtrar por estado "asistió"
            }).populate('aprendiz', 'nombre documento'); // Reemplaza 'nombre documento' con los campos que desees

            // Formatear la respuesta para incluir los valores deseados
            const formattedBitacoras = bitacoras.map(bitacora => ({
                documento: bitacora.aprendiz.documento,
                nombre: bitacora.aprendiz.nombre,
                createdAt: bitacora.createdAt,
                // Añade otros campos que desees incluir
            }));

            res.status(200).json(formattedBitacoras);
        } catch (error) {
            res.status(500).json({ message: error.message });
        }
    },



















